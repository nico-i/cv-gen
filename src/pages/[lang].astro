---
import "@/styles/globals.css";

import Profile from "@/components/sections/Profile.astro";
import Experience from "@/components/sections/Experience.astro";
import Interests from "@/components/sections/Interests.astro";

import { InterestStrapiRepo } from "@/lib/domain/interest/repo/strapi";
import { XpStrapiRepo } from "@/lib/domain/xp/repo/strapi";
import { InfoStrapiRepo } from "@/lib/domain/info/repo/strapi";
import { EdStrapiRepo } from "@/lib/domain/ed/repo/strapi";
import { SkillStrapiRepo } from "@/lib/domain/skill/repo/strapi";
import { LangStrapiRepo } from "@/lib/domain/lang/repo/strapi";
import { CertStrapiRepo } from "@/lib/domain/cert/repo/strapi";
import { ProjectStrapiRepo } from "@/lib/domain/project/repo/strapi";
import { VolunteerStrapiRepo } from "@/lib/domain/volunteer/repo/strapi";

import { Locale } from "@/lib/types/Locale";
import Education from "@/components/sections/Education.astro";
import Skills from "@/components/sections/Skills.astro";
import Languages from "@/components/sections/Languages.astro";
import Certificates from "@/components/sections/Certificates.astro";
import type { GetStaticPaths } from "astro";
import VolunteerWork from "@/components/sections/VolunteerWork.astro";
import Projects from "@/components/sections/Projects.astro";

export const getStaticPaths = (async () => {
  const paths = Object.values(Locale).map((locale) => {
    return { params: { lang: locale, slug: `/${locale}/` } };
  });

  return paths;
}) satisfies GetStaticPaths;

const { lang } = Astro.params;

import { GraphQLClient } from "graphql-request";
import { getSdk } from "src/__generated__/gql";

if (!import.meta.env.STRAPI_URL) {
  throw new Error("STRAPI_URL is not defined");
}

if (!import.meta.env.STRAPI_API_TOKEN) {
  throw new Error("STRAPI_API_TOKEN is not defined");
}

const gqlClient = new GraphQLClient(import.meta.env.STRAPI_URL, {
  headers: {
    Authorization: `bearer ${import.meta.env.STRAPI_API_TOKEN}`,
  },
});

const client = getSdk(gqlClient);

const localizedXps = await new XpStrapiRepo(client).getAllLocalized();
const localizedInterests = await new InterestStrapiRepo(
  client
).getAllLocalized();
const localizedEds = await new EdStrapiRepo(client).getAllLocalized();
const localizedSkills = await new SkillStrapiRepo(client).getAllLocalized();
const localizedLangs = await new LangStrapiRepo(client).getAllLocalized();
const localizedCerts = await new CertStrapiRepo(client).getAllLocalized();
const localizedProjects = await new ProjectStrapiRepo(client).getAllLocalized();
const localizedVolunteers = await new VolunteerStrapiRepo(
  client
).getAllLocalized();

const localizedInfo = (await new InfoStrapiRepo(client).getAllLocalized())[0];
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />

    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5" />
    <meta name="msapplication-TileColor" content="#da532c" />
    <meta name="theme-color" content="#ffffff" />

    <title>CV | Nico Ismaili</title>
  </head>
  <body
    class="w-full
    lg:w-[215.9mm]
    h-full
    mx-auto
    p-1.5
    grid gap-1.5 grid-cols-1 lg:grid-cols-[34%,auto] auto-cols-min"
  >
    <div class="hidden lg:flex lg:flex-col lg:gap-1.5">
      <Profile locale={lang} localizedInfo={localizedInfo} />
      <Skills locale={lang} localizedSkills={localizedSkills} />
      <Languages locale={lang} localizedLangs={localizedLangs} />
      <Interests locale={lang} localizedInterests={localizedInterests} />
    </div>
    <div class="hidden lg:flex lg:flex-col lg:gap-1.5">
      <Experience locale={lang} localizedXps={localizedXps} />
      <Education locale={lang} localizedEds={localizedEds} />
      <Projects locale={lang} localizedProjects={localizedProjects} />
      <Certificates locale={lang} localizedCerts={localizedCerts} />
      <VolunteerWork locale={lang} localizedVolunteers={localizedVolunteers} />
    </div>

    <div class="lg:hidden flex flex-col gap-1.5">
      <Profile locale={lang} localizedInfo={localizedInfo} />
      <Experience locale={lang} localizedXps={localizedXps} />
      <Skills locale={lang} localizedSkills={localizedSkills} />
      <Education locale={lang} localizedEds={localizedEds} />
      <Projects locale={lang} localizedProjects={localizedProjects} />
      <Certificates locale={lang} localizedCerts={localizedCerts} />
      <Languages locale={lang} localizedLangs={localizedLangs} />
      <VolunteerWork locale={lang} localizedVolunteers={localizedVolunteers} />
      <Interests locale={lang} localizedInterests={localizedInterests} />
    </div>
  </body>

  <!-- Auto Theme Switcher Script -->
  <script is:inline>
    const getThemePreference = () => {
      if (
        typeof localStorage !== "undefined" &&
        localStorage.getItem("theme")
      ) {
        return localStorage.getItem("theme");
      }
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    };
    const isDark = getThemePreference() === "dark";
    document.documentElement.classList[isDark ? "add" : "remove"]("dark");

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  </script>
</html>
