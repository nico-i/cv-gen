---
import "@/styles/globals.css";

import Profile from "@/components/sections/Profile.astro";
import Experience from "@/components/sections/Experience.astro";
import Interests from "@/components/sections/Interests.astro";

import { InterestStrapiRepo } from "@/lib/domain/interest/repo/strapi";
import { XpStrapiRepo } from "@/lib/domain/xp/repo/strapi";
import { InfoStrapiRepo } from "@/lib/domain/info/repo/strapi";
import { EdStrapiRepo } from "@/lib/domain/ed/repo/strapi";
import { SkillStrapiRepo } from "@/lib/domain/skill/repo/strapi";
import { LangStrapiRepo } from "@/lib/domain/lang/repo/strapi";

// import { CertStrapiRepo } from "@/lib/domain/cert/repo/strapi";
// import { ProjectStrapiRepo } from "@/lib/domain/project/repo/strapi";
// import { SkillStrapiRepo } from "@/lib/domain/skill/repo/strapi";
// import { VolunteerStrapiRepo } from "@/lib/domain/volunteer/repo/strapi";

import { PrintablePage } from "@/components/ui/PrintablePage";

import { Locale } from "@/lib/types/Locale";
import Education from "@/components/sections/Education.astro";
import Skills from "@/components/sections/Skills.astro";
import Languages from "@/components/sections/Languages.astro";

// const localizedCerts = await CertStrapiRepo.getAllLocalized();
// const localizedSkills = await SkillStrapiRepo.getAllLocalized();
// const localizedProjects = await ProjectStrapiRepo.getAllLocalized();
// const localizedVolunteers = await VolunteerStrapiRepo.getAllLocalized();

export async function getStaticPaths() {
  const paths = Object.values(Locale).map((locale) => {
    return { params: { lang: locale, slug: `/${locale}/` } };
  });

  return paths;
}

const { lang } = Astro.params;

const localizedXps = await XpStrapiRepo.getAllLocalized();
const localizedInterests = await InterestStrapiRepo.getAllLocalized();
const localizedEds = await EdStrapiRepo.getAllLocalized();
const localizedSkills = await SkillStrapiRepo.getAllLocalized();
const localizedLangs = await LangStrapiRepo.getAllLocalized();

const localizedInfo = (await InfoStrapiRepo.getAllLocalized())[0];
---

<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>CV | Nico Ismaili</title>
  </head>
  <body
    class="mx-auto print:m-0 bg-zinc-900 print:bg-background lg:p-12 print:p-0 flex flex-col gap-0 lg:gap-3 print:gap-0"
  >
    <PrintablePage
      className="grid gap-1.5 grid-cols-1 lg:grid-cols-[34%,auto] auto-cols-min"
    >
      <div class="hidden lg:flex lg:flex-col lg:gap-1.5">
        <Profile locale={lang} localizedInfo={localizedInfo} />
        <Interests locale={lang} localizedInterests={localizedInterests} />
        <Skills locale={lang} localizedSkills={localizedSkills} />
        <Languages locale={lang} localizedLangs={localizedLangs} />
      </div>
      <div class="hidden lg:flex lg:flex-col lg:gap-1.5">
        <Experience locale={lang} localizedXps={localizedXps} />
        <Education locale={lang} localizedEds={localizedEds} />
      </div>

      <div class="lg:hidden flex flex-col gap-1.5">
        <Profile locale={lang} localizedInfo={localizedInfo} />
        <Experience locale={lang} localizedXps={localizedXps} />
        <Skills locale={lang} localizedSkills={localizedSkills} />
        <Education locale={lang} localizedEds={localizedEds} />
        <Languages locale={lang} localizedLangs={localizedLangs} />
        <Interests locale={lang} localizedInterests={localizedInterests} />
      </div>
    </PrintablePage>

    <!-- Auto Theme Switcher Script -->
    <script is:inline>
      const getThemePreference = () => {
        if (
          typeof localStorage !== "undefined" &&
          localStorage.getItem("theme")
        ) {
          return localStorage.getItem("theme");
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      };
      const isDark = getThemePreference() === "dark";
      document.documentElement.classList[isDark ? "add" : "remove"]("dark");

      if (typeof localStorage !== "undefined") {
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains("dark");
          localStorage.setItem("theme", isDark ? "dark" : "light");
        });
        observer.observe(document.documentElement, {
          attributes: true,
          attributeFilter: ["class"],
        });
      }
    </script>
  </body>
</html>
