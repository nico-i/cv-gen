---
import BulletList from "@/components/ui/BulletList.astro";
import Card from "@/components/ui/Card.astro";
import Details, {
  type Props as DetailsProps,
} from "@/components/ui/Details.astro";
import ExternalIconLink from "@/components/ui/ExternalIconLink.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";
import TimeWindow from "@/components/ui/TimeWindow.astro";
import Typography from "@/components/ui/Typography.astro";
import { Project } from "@/lib/domain/project";
import type { Locale } from "@/lib/types/Locale";
import { fetchCollectionQuery } from "@/lib/utils";
import PencilRuler from "@/svg/pencil-ruler.svg?raw";
import i18next, { t } from "i18next";

interface Props extends DetailsProps {
  isPrint?: boolean;
}
const { isPrint = false, ...detailsProps }: Props = Astro.props;

const locale = i18next.language as Locale;
const projects = await fetchCollectionQuery(Project, locale);
---

<Card>
  <Fragment slot="title">
    <SectionTitle title={t("projects")} svgHtml={PencilRuler} />
  </Fragment>
  <Fragment slot="content">
    {
      projects.map((project) => {
        return (
          <Details
            {...detailsProps}
            isCompleted={project?.end !== undefined}
            asTimeLine
          >
            <Typography variant="large" slot="title">
              {project?.title}&hairsp;
              {project?.demoUrl && (
                <ExternalIconLink
                  href={project.demoUrl}
                  label={`${t("demo-site")} ${project.demoUrl}`}
                />
              )}
            </Typography>
            <div
              slot="subtitle"
              class:list={[
                isPrint
                  ? "flex flex-row gap-3"
                  : "flex flex-col lg:flex-row lg:gap-3",
              ]}
            >
              <TimeWindow start={project?.start!} end={project?.end} />
            </div>
            {project?.summaryListItems ? (
              <Fragment slot="content">
                <BulletList>
                  {project?.summaryListItems?.map((bullet) => (
                    <li set:html={bullet} />
                  ))}
                </BulletList>
              </Fragment>
            ) : (
              project.tldr
            )}
          </Details>
        );
      })
    }
  </Fragment>
</Card>
