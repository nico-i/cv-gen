---
import BulletList from "@/components/ui/BulletList.astro";
import Card from "@/components/ui/Card.astro";
import Details, {
  type Props as DetailsProps,
} from "@/components/ui/Details.astro";
import ExternalIconLink from "@/components/ui/ExternalIconLink.astro";
import SectionTitle from "@/components/ui/SectionTitle.astro";
import Svg from "@/components/ui/Svg.astro";
import TimeWindow from "@/components/ui/TimeWindow.astro";
import Typography from "@/components/ui/Typography.astro";
import { Xp } from "@/lib/domain/xp";
import type { Locale } from "@/lib/types/Locale";
import { fetchCollectionQuery } from "@/lib/utils";
import Building2 from "@/svg/building-2.svg?raw";
import Telescope from "@/svg/telescope.svg?raw";
import i18next, { t } from "i18next";

interface Props extends DetailsProps {
  isPrint?: boolean;
}
const { isPrint = false, ...detailsProps }: Props = Astro.props;

const locale = i18next.language as Locale;
const xps = await fetchCollectionQuery(Xp, locale);
---

<Card>
  <Fragment slot="title">
    <SectionTitle title={t("experience")} svgHtml={Telescope} />
  </Fragment>
  <Fragment slot="content">
    {
      xps.map((xp) => {
        return (
          <Details
            isCompleted={xp?.end !== undefined}
            asTimeLine
            {...detailsProps}
          >
            <Typography variant="large" slot="title">
              {xp?.position}
            </Typography>
            <div
              slot="subtitle"
              class:list={[
                isPrint
                  ? "flex flex-row gap-3"
                  : "flex flex-col lg:flex-row lg:gap-3 gap-0.5",
              ]}
            >
              <Typography variant="muted">
                <Svg svgHtml={Building2} />
                {xp.company}&hairsp;
                {xp?.url && (
                  <ExternalIconLink
                    href={xp.url}
                    label={`${xp.company} ${t("company-site")}`}
                  />
                )}
              </Typography>
              <TimeWindow start={xp?.start!} end={xp?.end} />
            </div>
            <Fragment slot="content">
              {xp?.infoListItems && (
                <BulletList>
                  {xp?.infoListItems?.map((bullet) => (
                    <li set:html={bullet} />
                  ))}
                </BulletList>
              )}
            </Fragment>
          </Details>
        );
      })
    }
  </Fragment>
</Card>
